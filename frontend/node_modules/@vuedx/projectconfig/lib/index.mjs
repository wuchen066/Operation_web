import * as Path from 'path';
import Path__default from 'path';
import { toPosixPath, isString, getComponentName } from '@vuedx/shared';
import JSON5 from 'json5';

const DEFAULT_PROJECT_CONFIG = {
    globalComponents: {},
    globalDirectives: {},
    preferences: {
        componentsDirectories: ['src/components'],
        script: { mode: 'setup', language: 'js' },
        style: { language: 'css' },
        template: {
            directiveSyntax: 'shorthand',
            propCase: 'camel',
            tagCase: 'auto',
        },
    },
};

function deepDefaults(a, b) {
    if (b == null)
        return a;
    Object.keys(b).forEach((key) => {
        const valueA = a[key];
        const valueB = b[key];
        if (valueB === undefined)
            return;
        if (valueA == null || Array.isArray(valueB)) {
            a[key] = valueB;
        }
        else if (typeof valueA === 'object' && typeof valueB === 'object') {
            a[key] = deepDefaults(valueA, valueB);
        }
        else {
            a[key] = valueB;
        }
    });
    return a;
}

var FileWatcherEventKind;
(function (FileWatcherEventKind) {
    FileWatcherEventKind[FileWatcherEventKind["Created"] = 0] = "Created";
    FileWatcherEventKind[FileWatcherEventKind["Changed"] = 1] = "Changed";
    FileWatcherEventKind[FileWatcherEventKind["Deleted"] = 2] = "Deleted";
})(FileWatcherEventKind || (FileWatcherEventKind = {}));
function findNearestFile(fs, dir, name) {
    let cur = toPosixPath(dir);
    while (cur.length > 1) {
        const fileName = Path.posix.resolve(cur, name);
        if (fs.fileExists(fileName))
            return fileName;
        cur = Path.posix.dirname(cur);
    }
    return null;
}

function resolveComponents(rootDir, resources) {
    const components = {};
    const add = (name, source) => {
        const sources = components[name] ?? (components[name] = []);
        if (sources.some((item) => item.moduleName === source.moduleName &&
            item.exportName === source.exportName)) {
            return; // duplicate
        }
        sources.push(source);
    };
    for (const resource of resources) {
        if (isString(resource)) {
            add(getComponentName(resource), {
                moduleName: resolve(resource),
            });
        }
        else {
            Object.entries(resource).forEach(([key, value]) => {
                add(key, isString(value) ? { moduleName: resolve(value) } : value);
            });
        }
    }
    return components;
    function resolve(resource) {
        if (resource.startsWith('.'))
            return Path__default.posix.resolve(rootDir, resource);
        else
            return resource;
    }
}

function resolveDirectives(rootDir, resources) {
    const directives = {};
    const add = (name, source) => {
        const sources = directives[name] ?? (directives[name] = []);
        if (sources.some((item) => item.moduleName === source.moduleName &&
            item.exportName === source.exportName)) {
            return; // duplicate
        }
        sources.push(source);
    };
    for (const resource of resources) {
        if (isString(resource)) ;
        else
            Object.entries(resource).forEach(([key, value]) => {
                add(key, isString(value) ? { moduleName: resolve(value) } : value);
            });
    }
    return directives;
    function resolve(resource) {
        if (resource.startsWith('.'))
            return Path__default.posix.resolve(rootDir, resource);
        else
            return resource;
    }
}

class VueProject {
    constructor(fs, rootDir, packageFile = null, projectFile = null) {
        this.fs = fs;
        this.rootDir = rootDir;
        this.packageFile = packageFile;
        this.projectFile = projectFile;
        this.watchers = [];
        this._projectVersion = 1;
        this._dependencies = {};
        this._config = DEFAULT_PROJECT_CONFIG;
        this._vueVersion = '3.2.0';
        this.runtimeFile = Path.resolve(rootDir, 'project.vuedx_project_runtime.d.ts');
        this.onPackageFileChange();
        this.onProjectFileChange();
        if (packageFile != null) {
            this.watchers.push(fs.watchFile(packageFile, (_fileName, event) => {
                if (event === FileWatcherEventKind.Changed) {
                    this.onPackageFileChange();
                }
            }));
        }
        if (projectFile != null) {
            this.watchers.push(fs.watchFile(projectFile, (_fileName, event) => {
                if (event === FileWatcherEventKind.Changed) {
                    this.onProjectFileChange();
                }
                else if (event === FileWatcherEventKind.Deleted) {
                    this._config = DEFAULT_PROJECT_CONFIG;
                }
            }));
        }
    }
    static create(fs, rootDir) {
        const projectFile = Path.posix.resolve(rootDir, 'vueconfig.json');
        const packageFile = findNearestFile(fs, rootDir, 'package.json');
        return new VueProject(fs, rootDir, packageFile, fs.fileExists(projectFile) ? projectFile : null);
    }
    get vueVersion() {
        return this._vueVersion;
    }
    get projectVersion() {
        return this._projectVersion;
    }
    onProjectFileChange() {
        if (this.projectFile == null)
            return;
        const content = this.fs.readFile(this.projectFile);
        if (content != null) {
            try {
                this.setConfig(JSON5.parse(content));
            }
            catch (e) {
                const error = e;
                console.error(`[VueDX] (ProjectConfig) ${error.message} ${error.stack ?? ''}`);
            }
        }
    }
    onPackageFileChange() {
        if (this.packageFile == null)
            return;
        const content = this.fs.readFile(this.packageFile);
        if (content != null) {
            try {
                const pkg = JSON.parse(content);
                this.loadDependencies({
                    ...pkg.devDependencies,
                    ...pkg.dependencies,
                });
            }
            catch (e) {
                const error = e;
                console.error(`[VueDX] (ProjectConfig) ${error.message} ${error.stack ?? ''}`);
            }
            const vueVersion = this._dependencies['vue'];
            if (vueVersion != null) {
                this._vueVersion = vueVersion;
            }
        }
    }
    loadDependencies(dependencies) {
        if (this.packageFile == null)
            return;
        const modulesDir = Path.posix.resolve(Path.posix.dirname(this.packageFile), 'node_modules');
        Object.keys(dependencies).forEach((packageName) => {
            const fileName = Path.posix.resolve(modulesDir, packageName, 'package.json');
            if (this.fs.fileExists(fileName)) {
                try {
                    this._dependencies[packageName] = JSON.parse(this.fs.readFile(fileName) ?? '{}').version;
                }
                catch (e) {
                    const error = e;
                    console.error(`[VueDX] (ProjectConfig) ${error.message} in ${fileName} ${error.stack ?? ''}`);
                    this._dependencies[packageName] = '0.0.0';
                }
            }
        });
    }
    dispose() {
        this.watchers.forEach((watcher) => watcher.close());
        this.watchers.length = 0;
    }
    get dependencies() {
        return this._dependencies;
    }
    get config() {
        return this._config;
    }
    setConfig(config) {
        this._config = {
            globalComponents: this._config.globalComponents,
            globalDirectives: this._config.globalDirectives,
            preferences: deepDefaults(this._config.preferences, config.preferences),
        };
        if (config.globalComponents != null) {
            this._config.globalComponents = resolveComponents(this.rootDir, config.globalComponents);
        }
        if (config.globalDirectives != null) {
            this._config.globalDirectives = resolveDirectives(this.rootDir, config.globalDirectives);
        }
        this._projectVersion += 1;
    }
    get kind() {
        return this.projectFile == null ? 'inferred' : 'configured';
    }
}

const version = "0.7.3";

export { VueProject, version };
//# sourceMappingURL=index.mjs.map
