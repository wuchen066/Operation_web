import type { TypeScript } from '../contracts/TypeScript';
import { FilesystemService } from '../services/FilesystemService';
import { TemplateDeclarationsService } from '../services/TemplateDeclarationsService';
import { TypescriptContextService } from '../services/TypescriptContextService';
import { DefinitionService } from './DefinitionService';
export declare class ReferencesService implements Pick<TypeScript.LanguageService, 'getReferencesAtPosition' | 'findReferences' | 'getFileReferences'> {
    private readonly fs;
    private readonly ts;
    private readonly declarations;
    private readonly definitions;
    constructor(fs: FilesystemService, ts: TypescriptContextService, declarations: TemplateDeclarationsService, definitions: DefinitionService);
    getReferencesAtPosition(fileName: string, position: number): TypeScript.ReferenceEntry[] | undefined;
    findReferences(fileName: string, position: number): TypeScript.ReferencedSymbol[] | undefined;
    getFileReferences(fileName: string): TypeScript.ReferenceEntry[];
    private pick;
    processReferences(references: TypeScript.ReferenceEntry[] | undefined): TypeScript.ReferenceEntry[];
    processReferencedSymbols(symbols: TypeScript.ReferencedSymbol[] | undefined): TypeScript.ReferencedSymbol[] | undefined;
}
//# sourceMappingURL=ReferencesService.d.ts.map