export declare type SourceMapSegment = [generatedColumn: number] | [
    generatedColumn: number,
    sourceIndex: number,
    originalLine: number,
    originalColumn: number
] | [
    generatedColumn: number,
    sourceIndex: number,
    originalLine: number,
    originalColumn: number,
    nameIndex: number
];
export interface DecodedSourceMap {
    file: string;
    sources: string[];
    sourcesContent: string[];
    names: string[];
    mappings: SourceMapSegment[][];
}
export declare type SourceMapLike = {
    mappings: string;
    names?: string[];
} | PartialDecodedSourceMap;
interface PartialDecodedSourceMap {
    names?: string[];
    mappings: SourceMapSegment[][];
}
declare class LineColumnMapper {
    private readonly offsets;
    constructor(source: string);
    positionAt(position: number): {
        line: number;
        column: number;
    };
    offsetAt(line: number, column: number): number;
}
export declare class SourceTransformer {
    private readonly source;
    private readonly sourceMap;
    private code;
    private line;
    private column;
    constructor(fileName: string, source: string);
    nextLine(): void;
    append(code: string, sourceMap?: SourceMapLike): void;
    private _sourceLineColumnMapper?;
    get sourceLineColumnMapper(): LineColumnMapper;
    clone(start: number, end: number): void;
    end(): {
        code: string;
        map: DecodedSourceMap;
    };
}
export declare function getMappings(sourceMap: SourceMapLike): DecodedSourceMap['mappings'];
export declare function rebaseSourceMap(sourceMap: SourceMapLike, startPosition?: {
    line: number;
    column: number;
}): DecodedSourceMap;
export {};
//# sourceMappingURL=source.d.ts.map