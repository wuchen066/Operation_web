interface ParsedFileName {
    type: string;
    fileName: string;
}
export interface FilesystemSchemeFileName extends ParsedFileName {
    type: 'scheme';
    scheme: string;
    fileName: string;
}
export interface VueTsxFileName extends ParsedFileName {
    type: 'vue-tsx';
    fileName: string;
}
export interface VueJsxFileName extends ParsedFileName {
    type: 'vue-jsx';
    fileName: string;
}
export interface VueSFCDescriptorFileName extends ParsedFileName {
    type: 'vue-descriptor';
    fileName: string;
}
export interface VueTemplateASTFileName extends ParsedFileName {
    type: 'vue-template-ast';
    fileName: string;
}
export interface FileName extends ParsedFileName {
    type: 'other';
    fileName: string;
}
declare type FileNames = FilesystemSchemeFileName | VueTsxFileName | VueJsxFileName | VueSFCDescriptorFileName | VueTemplateASTFileName | FileName;
export declare function parseFileName(fileName: string): FileNames;
export declare function toFileName(f: FileNames): string;
export declare function isFilesystemSchemeFile(fileName: string): boolean;
export declare function isVueFile(fileName: string): boolean;
export declare function isVueTsxFile(fileName: string): boolean;
export declare function isVueJsxFile(fileName: string): boolean;
export declare function isVueSFCDescriptorFile(fileName: string): boolean;
export declare function isVueTemplateASTFile(fileName: string): boolean;
export declare function isVueVirtualFile(fileName: string): boolean;
export declare function isVueRuntimeFile(fileName: string): boolean;
export declare function isProjectRuntimeFile(fileName: string): boolean;
export declare function mayContainVirtualFileName(text: string): boolean;
export {};
//# sourceMappingURL=fileName.d.ts.map