import type { Endpoint } from './channel';
import type { Remote } from './types';
import { Value } from './value';
export interface Handler {
    canHandle(value: unknown): boolean;
    serialize(value: unknown): unknown;
    deserialize(value: unknown): unknown;
}
declare const EXPOSED: unique symbol;
declare const THROWN: unique symbol;
declare const Symbols: {
    readonly exposed: typeof EXPOSED;
    readonly thrown: typeof THROWN;
};
export declare function isExposed<T>(obj: T): obj is ExposedObject<T>;
export declare type ExposedObject<T> = T & {
    [Symbols.exposed]: string;
};
export declare function withEndpoint<T>(endpoint: Endpoint, fn: () => T): T;
export declare function createExposed<T>(value: T, endpoint: Endpoint): ExposedObject<T>;
export declare const Handlers: Map<string, Handler>;
export declare function toValue(endpoint: Endpoint, value: unknown): Value;
export declare function fromValue(endpoint: Endpoint, value: Value): unknown;
export declare function createEndpointProxy<T>(endpoint: Endpoint, path: Array<string | number | symbol>, target?: any, boundArgs?: unknown[]): Remote<T>;
export {};
//# sourceMappingURL=handlers.d.ts.map