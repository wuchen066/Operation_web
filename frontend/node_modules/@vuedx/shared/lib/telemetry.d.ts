interface Options {
    release: string;
    environment: string;
    tracesSampleRate: number;
}
interface EventDefaults {
    sessionId: string;
    os: string;
    packageName?: string;
    typescriptVersion?: string;
    nodeVersion: string;
    vueVersion?: string;
    [key: string]: string | number | boolean | undefined;
}
export declare class Telemetry {
    private static isTelemetryEnabled;
    private readonly defaults;
    private readonly user;
    private isTelemetryEnabled;
    constructor(key: string, options: Options, defaults?: Partial<EventDefaults>);
    private getUserId;
    measure(name: string, duration: number): void;
    trace(name: string, description?: string): () => void;
    collect(key: string, value: Record<string, any>): void;
    error(payload: any | Error): void;
    private static _instance?;
    static get instance(): Telemetry;
    static setup(key: string, packageName: string, packageVersion: string, tracesSampleRate: number, defaults: Partial<EventDefaults>): void;
    static extend(defaults: Partial<EventDefaults>): void;
    static setTelemetryEnabled(enabled: boolean): void;
}
export declare function tracePromise<T>(event: string, promise: Promise<T>): Promise<T>;
export declare function trace(event: string, description?: string): () => void;
export declare function collectError(error: string | Error): void;
export declare function collect(key: string, value: Record<string, any>): void;
export {};
//# sourceMappingURL=telemetry.d.ts.map