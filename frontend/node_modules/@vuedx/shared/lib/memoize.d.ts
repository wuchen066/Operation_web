export declare type Evictable<T extends (...args: any) => any> = T & {
    evict(...args: Parameters<T>): void;
};
export declare function memoize<F extends (...args: any) => unknown>(fn: F, getKey: (args: Parameters<F>) => object): Evictable<F>;
export declare function memoizeByFirstArg<F extends (...args: any) => unknown>(fn: F): Evictable<F>;
//# sourceMappingURL=memoize.d.ts.map