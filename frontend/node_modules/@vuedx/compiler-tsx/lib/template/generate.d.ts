import { RootNode } from '@vue/compiler-core';
import type { TransformedCode } from '../types/TransformedCode';
import type { NodeTransformContext } from './types/NodeTransformContext';
export declare const annotations: {
    /**
     * Mark range to ignore diagnostics.
     */
    diagnosticsIgnore: {
        start: string;
        end: string;
    };
    /**
     * Used to define range for hoists or defining global variables.
     */
    templateGlobals: {
        start: string;
        end: string;
    };
    /**
     * Used to define range for return from setup() function, generated from <script setup>
     */
    setupGlobals: {
        start: string;
        end: string;
    };
    /**
     * Missing expression in v-if or v-else-if.
     */
    missingExpression: string;
    /**
     * Used in every JSX element to provide position for attribute completion.
     */
    tsxCompletions: string;
    /**
     * Used once in render function to get completions from context.
     */
    tsCompletions: string;
};
export declare function generate(root: RootNode, options: NodeTransformContext): TransformedCode;
//# sourceMappingURL=generate.d.ts.map