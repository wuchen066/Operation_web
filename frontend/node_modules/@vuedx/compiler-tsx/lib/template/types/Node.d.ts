import type { AttributeNode, BaseElementNode, CompoundExpressionNode, DirectiveNode, Node, SourceLocation } from '@vue/compiler-core';
import type { Scope } from '../scope/Scope';
export interface CustomNode extends Node {
    scope: Scope;
}
export interface CustomBaseElementNode extends BaseElementNode {
    hoists?: CompoundExpressionNode[];
    tagLoc: SourceLocation;
    startTagLoc: SourceLocation;
    endTagLoc?: SourceLocation;
}
export interface CustomDirectiveNode extends DirectiveNode {
    nameLoc?: SourceLocation;
    modifierLocs: SourceLocation[];
}
export interface CustomAttributeNode extends AttributeNode {
    nameLoc: SourceLocation;
}
declare module '@vue/compiler-core' {
    interface Node {
        scope: Scope;
    }
    interface ForNode {
        hoists: CompoundExpressionNode[];
    }
    interface BaseElementNode {
        hoists?: CompoundExpressionNode[];
        tagLoc: SourceLocation;
        startTagLoc: SourceLocation;
        endTagLoc?: SourceLocation;
    }
    interface AttributeNode {
        nameLoc: SourceLocation;
    }
    interface DirectiveNode {
        nameLoc?: SourceLocation;
        modifierLocs: SourceLocation[];
        resolvedName?: string;
    }
    interface ComponentNode {
        resolvedName?: string;
        is?: AttributeNode | DirectiveNode;
        slots: Array<{
            name?: ExpressionNode;
            args?: ExpressionNode;
            hoists: CompoundExpressionNode[];
            children: Node[];
            template?: TemplateNode;
        }>;
        unassignedSlots?: Node[];
    }
}
//# sourceMappingURL=Node.d.ts.map