{"version":3,"file":"index.mjs","sources":["../src/VueSFCDocument.ts"],"sourcesContent":["import type {\n  CompilerError,\n  SFCBlock,\n  SFCDescriptor,\n} from '@vuedx/compiler-sfc'\nimport {\n  CompileOptions,\n  CompileOutput,\n  compileWithDecodedSourceMap,\n} from '@vuedx/compiler-tsx'\nimport {\n  binarySearch,\n  BinarySearchBias,\n  createCache,\n  invariant,\n  isNotNull,\n  startMeasure,\n} from '@vuedx/shared'\nimport type { RootNode } from '@vuedx/template-ast-types'\nimport {\n  Position,\n  Range,\n  TextDocument,\n  TextDocumentContentChangeEvent,\n} from 'vscode-languageserver-textdocument'\nimport { encode } from 'sourcemap-codec'\n\nexport type Mapping = [\n  GeneratedLine: number,\n  GeneratedColumn: number,\n  OriginalLine: number,\n  OriginalColumn: number,\n  Name: string | undefined,\n]\ninterface VueToTsxSnapshot extends CompileOutput {\n  readonly document: TextDocument\n  readonly mappingsByOriginalOrder: Mapping[]\n  readonly mappingsByGeneratedOrder: Mapping[]\n  readonly blocks: SFCBlock[]\n}\n\ntype SourceMapBiasType = typeof BinarySearchBias[keyof typeof BinarySearchBias]\n\nconst enum MappingKey {\n  GeneratedLine,\n  GeneratedColumn,\n  OriginalLine,\n  OriginalColumn,\n  Name,\n}\n\nexport class VueSFCDocument implements TextDocument {\n  public readonly originalFileName: string\n  public readonly generatedFileName: string\n  public readonly options: Required<CompileOptions>\n\n  private _original: TextDocument\n\n  private constructor(\n    original: TextDocument,\n    options: Omit<CompileOptions, 'cache'>,\n  ) {\n    this._original = original\n    this.options = {\n      isTypeScript: true,\n      internalIdentifierPrefix: '__VueDX_',\n      runtimeModuleName: 'vue',\n      typeCheckModuleName: 'vuedx~runtime',\n      ...options,\n      cache: createCache(15), // More than 15 blocks in SFC is not common.\n    }\n    this.originalFileName = this.options.fileName\n    this.generatedFileName = `${this.options.fileName}${\n      this.options.isTypeScript ? '.tsx' : '.jsx'\n    }`\n  }\n\n  /** @deprecated used by tsserver */\n  public lineMap: unknown | undefined\n\n  /** @deprecated used by tsserver */\n  public get text(): string {\n    return this.original.getText()\n  }\n\n  /** @deprecated used by tsserver */\n  public getLineAndCharacterOfPosition(position: number): Position {\n    return this.original.positionAt(position)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  public getSourceFile(fileName: string = this.fileName) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const ctx = this\n\n    return {\n      fileName,\n      get text(): string {\n        return ctx.text\n      },\n      get lineMap(): unknown | undefined {\n        return ctx.lineMap\n      },\n      set lineMap(value: unknown | undefined) {\n        ctx.lineMap = value\n      },\n      getLineAndCharacterOfPosition: (position: number) =>\n        ctx.getLineAndCharacterOfPosition(position),\n    }\n  }\n\n  public get fileName(): string {\n    return this.originalFileName\n  }\n\n  public get descriptor(): SFCDescriptor {\n    return this._compile().descriptor\n  }\n\n  public get errors(): Array<CompilerError | SyntaxError> {\n    return this._compile().errors\n  }\n\n  public get templateAST(): RootNode | undefined {\n    return this._compile().template\n  }\n\n  public get original(): TextDocument {\n    return this._original\n  }\n\n  public get generated(): TextDocument {\n    return this._compile().document\n  }\n\n  public get blocks(): SFCBlock[] {\n    return this._compile().blocks\n  }\n\n  public get snapshot(): VueToTsxSnapshot {\n    return this._compile()\n  }\n\n  public get map(): string {\n    const map = this._compile().map\n    return JSON.stringify({\n      ...map,\n      version: 3,\n      mappings: encode(map.mappings),\n    })\n  }\n\n  public getText(range?: Range): string {\n    return this.generated.getText(range)\n  }\n\n  public positionAt(offset: number): Position {\n    return this.generated.positionAt(offset)\n  }\n\n  public offsetAt(position: Position): number {\n    return this.generated.offsetAt(position)\n  }\n\n  public get version(): number {\n    return this.original.version // use original version as generated code might be out of date\n  }\n\n  public get lineCount(): number {\n    return this.generated.lineCount\n  }\n\n  public get uri(): string {\n    return `file://${this.originalFileName}`\n  }\n\n  public get languageId(): string {\n    return this.options.isTypeScript ? 'typescript' : 'javascript'\n  }\n\n  public getBlockAt(offset: number): SFCBlock | null {\n    const block = this.blocks.find(\n      (block) =>\n        block.loc.start.offset <= offset && offset <= block.loc.end.offset,\n    )\n\n    return block ?? null\n  }\n\n  private _snapshot: VueToTsxSnapshot | null = null\n  private _compile(): VueToTsxSnapshot {\n    if (this._snapshot?.document.version !== this.original.version) {\n      const previous = this._snapshot\n      try {\n        const endCompileMeasure = startMeasure('VueSFCDocument.compile')\n        const result = compileWithDecodedSourceMap(\n          this.original.getText(),\n          this.options,\n        )\n        const mappings = memoize(() =>\n          result.map.mappings.flatMap((mappings, line) =>\n            mappings.map((mapping) => {\n              const m: Mapping = [\n                line,\n                mapping[0],\n                mapping[2] ?? -1,\n                mapping[3] ?? -1,\n                result.map.names[mapping[4] ?? -1],\n              ]\n              return m\n            }),\n          ),\n        )\n        const descriptor = result.descriptor\n        const mappingsByOriginalOrder = memoize(() =>\n          mappings().slice().sort(compareOriginal),\n        )\n        const mappingsByGeneratedOrder = memoize(() =>\n          mappings().slice().sort(compareGenerated),\n        )\n        const blocks = memoize(() => {\n          return [\n            descriptor.scriptSetup,\n            descriptor.script,\n            descriptor.template,\n            ...descriptor.styles,\n            ...descriptor.customBlocks,\n          ]\n            .filter(isNotNull)\n            .sort((a, b) => a.loc.start.offset - b.loc.start.offset)\n        })\n        this._snapshot = {\n          ...result,\n          get mappingsByOriginalOrder() {\n            return mappingsByOriginalOrder()\n          },\n          get mappingsByGeneratedOrder() {\n            return mappingsByGeneratedOrder()\n          },\n          get blocks() {\n            return blocks()\n          },\n          document: TextDocument.create(\n            `file://${this.generatedFileName}`,\n            this.options.isTypeScript ? 'typescript' : 'javascript',\n            this.original.version,\n            result.code,\n          ),\n        }\n\n        endCompileMeasure()\n      } catch (e) {\n        console.error('Failed to compile', e)\n        if (previous != null) {\n          this._snapshot = {\n            ...previous,\n            errors: [...previous.errors, e as SyntaxError],\n            document: TextDocument.update(\n              previous.document,\n              [],\n              this.original.version,\n            ),\n          }\n        } else {\n          this._snapshot = {\n            descriptor: {\n              script: null,\n              scriptSetup: null,\n              template: null,\n              styles: [],\n              customBlocks: [],\n            },\n            errors: [e as SyntaxError],\n            blocks: [],\n            code: '',\n            map: {\n              file: '',\n              mappings: [],\n              names: [],\n              sources: [],\n              sourcesContent: [],\n            },\n            document: TextDocument.create(\n              `file://${this.generatedFileName}`,\n              this.options.isTypeScript ? 'typescript' : 'javascript',\n              this.original.version,\n              '',\n            ),\n            mappingsByGeneratedOrder: [],\n            mappingsByOriginalOrder: [],\n          }\n        }\n      }\n    }\n\n    return this._snapshot\n  }\n\n  public findMapping(\n    positionType: 'original' | 'generated',\n    position: Position,\n    searchBias: SourceMapBiasType = BinarySearchBias.GREATEST_LOWER_BOUND,\n  ): Mapping | null {\n    const snapshot = this._snapshot ?? this._compile()\n    const needle = [] as unknown as Mapping\n    if (positionType === 'original') {\n      needle[MappingKey.OriginalLine] = position.line\n      needle[MappingKey.OriginalColumn] = position.character\n    } else {\n      needle[MappingKey.GeneratedLine] = position.line\n      needle[MappingKey.GeneratedColumn] = position.character\n    }\n    const index = binarySearch(\n      needle,\n      positionType === 'original'\n        ? snapshot.mappingsByOriginalOrder\n        : snapshot.mappingsByGeneratedOrder,\n      positionType === 'original' ? compareOriginal : compareGenerated,\n      searchBias,\n    )\n    if (index < 0) return null\n\n    return (\n      (positionType === 'original'\n        ? snapshot.mappingsByOriginalOrder[index]\n        : snapshot.mappingsByGeneratedOrder[index]) ?? null\n    )\n  }\n\n  public originalPositionFor(position: Position): Position | null {\n    const offset = this.generated.offsetAt(position)\n    const originalOffset = this.originalOffsetAt(offset)\n    if (originalOffset == null) return null\n    return this.original.positionAt(originalOffset)\n  }\n\n  public originalOffsetAt(offset: number): number | null {\n    const span = this.findOriginalTextSpan({ start: offset, length: 1 })\n    if (span == null) return null\n    return span.start\n  }\n\n  public findOriginalTextSpan(spanInGeneratedText: TextSpan): TextSpan | null {\n    const position = this.generated.positionAt(spanInGeneratedText.start)\n    const low = this.findMapping(\n      'generated',\n      position,\n      BinarySearchBias.GREATEST_LOWER_BOUND,\n    )\n\n    if (low == null || low[MappingKey.OriginalLine] < 0) return null\n    const result = this._processMappingUsingMeta(\n      'generated',\n      spanInGeneratedText,\n      low,\n    )\n    if (result != null) return result\n\n    const generatedStart = this.generated.offsetAt({\n      line: low[MappingKey.GeneratedLine],\n      character: low[MappingKey.GeneratedColumn],\n    })\n\n    const originalStart = this.original.offsetAt({\n      line: low[MappingKey.OriginalLine],\n      character: low[MappingKey.OriginalColumn],\n    })\n\n    // prefix match\n    const originalString = this.original.getText().slice(originalStart)\n    const generatedString = this.generated.getText().slice(generatedStart)\n\n    const prefixLength = findCommonPrefixLength(originalString, generatedString)\n    if (generatedStart + prefixLength < spanInGeneratedText.start) return null // no mapping\n\n    // TODO: original position should be contained in a block\n    return {\n      start:\n        originalStart + Math.abs(generatedStart - spanInGeneratedText.start),\n      length: Math.min(prefixLength, spanInGeneratedText.length),\n    }\n  }\n\n  public findGeneratedTextSpan(spanInOriginalText: TextSpan): TextSpan | null {\n    const block = this.getBlockAt(spanInOriginalText.start)\n    if (block == null) return null\n    const isZeroWidth = spanInOriginalText.length === 0\n    const start = this.generatedOffsetAt(spanInOriginalText.start, isZeroWidth)\n    if (start == null) return null\n    if (isZeroWidth) return { start, length: 0 }\n\n    const end =\n      this.generatedOffsetAt(\n        spanInOriginalText.start + spanInOriginalText.length,\n        true,\n      ) ?? start\n\n    return { start: Math.min(start, end), length: Math.abs(end - start) }\n  }\n\n  private _processMappingUsingMeta(\n    kind: 'generated' | 'original',\n    span: TextSpan,\n    mapping: Mapping,\n  ): (TextSpan & { mapping: 'P' | 'S' | 'T' }) | null {\n    const name = mapping[MappingKey.Name]\n    if (name == null) return null\n    const result = /^<<(P|S|T)>>(\\d+)(?:\\|(\\d+))?$/.exec(name)\n    if (result != null) {\n      switch (result[1]) {\n        case 'P':\n          {\n            invariant(result[2])\n            const generatedLength = parseInt(result[2], 10)\n            invariant(Number.isInteger(generatedLength))\n            const original = this.original.offsetAt({\n              line: mapping[MappingKey.OriginalLine],\n              character: mapping[MappingKey.OriginalColumn],\n            })\n            const generated = this.generated.offsetAt({\n              line: mapping[MappingKey.GeneratedLine],\n              character: mapping[MappingKey.GeneratedColumn],\n            })\n\n            if (kind === 'generated') {\n              // if span is in generated range\n              if (\n                contains({ start: generated, length: generatedLength }, span)\n              ) {\n                const skipLength = Math.abs(span.start - generated)\n                const length = Math.min(\n                  generatedLength - skipLength,\n                  span.length,\n                )\n\n                return {\n                  start: original + skipLength,\n                  length,\n                  mapping: 'P',\n                }\n              }\n            } else {\n              if (\n                contains({ start: original, length: generatedLength }, span)\n              ) {\n                const skipLength = Math.abs(span.start - original)\n                const length = Math.min(\n                  generatedLength - skipLength,\n                  span.length,\n                )\n\n                return {\n                  start: generated + skipLength,\n                  length,\n                  mapping: 'P',\n                }\n              }\n            }\n          }\n          break\n        case 'S':\n          {\n            invariant(result[2] != null && result[3] != null)\n            const originalLength = parseInt(result[2], 10)\n            const generatedLength = parseInt(result[3], 10)\n            invariant(Number.isInteger(originalLength))\n            invariant(Number.isInteger(generatedLength))\n            invariant(originalLength >= generatedLength)\n            const diffLength = Math.abs(generatedLength - originalLength)\n            const original = this.original.offsetAt({\n              line: mapping[MappingKey.OriginalLine],\n              character: mapping[MappingKey.OriginalColumn],\n            })\n            const generated = this.generated.offsetAt({\n              line: mapping[MappingKey.GeneratedLine],\n              character: mapping[MappingKey.GeneratedColumn],\n            })\n\n            if (kind === 'generated') {\n              if (\n                contains({ start: generated, length: generatedLength }, span)\n              ) {\n                const skipLength = Math.abs(span.start - generated)\n                if (skipLength <= diffLength) {\n                  return {\n                    start: original,\n                    length: originalLength,\n                    mapping: 'S',\n                  }\n                }\n\n                const length = Math.min(\n                  originalLength - (skipLength - diffLength),\n                  span.length,\n                )\n\n                return {\n                  start: original + skipLength,\n                  length,\n                  mapping: 'S',\n                }\n              } else {\n                if (\n                  contains({ start: original, length: originalLength }, span)\n                ) {\n                  const skipLength = Math.abs(span.start - original)\n                  const length = Math.min(\n                    originalLength - skipLength,\n                    span.length,\n                  )\n\n                  return {\n                    start: generated + diffLength + skipLength,\n                    length,\n                    mapping: 'S',\n                  }\n                }\n              }\n            }\n          }\n          break\n        case 'T':\n          {\n            invariant(result[2] != null && result[3] != null)\n            const originalLength = parseInt(result[2], 10)\n            const generatedLength = parseInt(result[3], 10)\n            invariant(Number.isInteger(originalLength))\n            invariant(Number.isInteger(generatedLength))\n            const original = this.original.offsetAt({\n              line: mapping[MappingKey.OriginalLine],\n              character: mapping[MappingKey.OriginalColumn],\n            })\n\n            const generated = this.generated.offsetAt({\n              line: mapping[MappingKey.GeneratedLine],\n              character: mapping[MappingKey.GeneratedColumn],\n            })\n\n            if (kind === 'generated') {\n              if (\n                contains({ start: generated, length: generatedLength }, span)\n              ) {\n                return {\n                  start: original,\n                  length: originalLength,\n                  mapping: 'T',\n                }\n              }\n            } else {\n              if (contains({ start: original, length: originalLength }, span)) {\n                return {\n                  start: generated,\n                  length: generatedLength,\n                  mapping: 'T',\n                }\n              }\n            }\n          }\n          break\n      }\n    }\n    return null\n  }\n\n  public generatedPositionFor(position: Position): Position | null {\n    const offset = this.original.offsetAt(position)\n    const generatedOffset = this.generatedOffsetAt(offset)\n    if (generatedOffset == null) return null\n    return this.generated.positionAt(generatedOffset)\n  }\n\n  public generatedOffsetAt(\n    offset: number,\n    isZeroWidth: boolean = false,\n  ): number | null {\n    const position = this.original.positionAt(offset)\n    const low = this.findMapping(\n      'original',\n      position,\n      BinarySearchBias.GREATEST_LOWER_BOUND,\n    )\n\n    if (low == null) return null\n    const result = this._processMappingUsingMeta(\n      'original',\n      { start: offset, length: 0 },\n      low,\n    )\n    if (result != null) {\n      return isZeroWidth && result.mapping === 'T'\n        ? result.start + result.length\n        : result.start\n    }\n\n    const originalStart = this.original.offsetAt({\n      line: low[MappingKey.OriginalLine],\n      character: low[MappingKey.OriginalColumn],\n    })\n    const start =\n      this.generated.offsetAt({\n        line: low[MappingKey.GeneratedLine],\n        character: low[MappingKey.GeneratedColumn],\n      }) +\n      // source mappings are prefix based, so we assume the original\n      // and generated text have the same prefix.\n      Math.abs(originalStart - offset)\n\n    return start\n  }\n\n  static create(\n    fileName: string,\n    content: string,\n    options: Omit<CompileOptions, 'cache' | 'fileName'>,\n    version: number = 0,\n  ): VueSFCDocument {\n    return new VueSFCDocument(\n      TextDocument.create(`file://${fileName}`, 'vue', version, content),\n      { ...options, fileName },\n    )\n  }\n\n  public update(\n    changes: TextDocumentContentChangeEvent[],\n    version: number,\n  ): void {\n    this._original = TextDocument.update(this._original, changes, version)\n    this.lineMap = undefined\n  }\n}\n\nfunction compareOriginal(a: Mapping, b: Mapping): number {\n  const comparison = a[MappingKey.OriginalLine] - b[MappingKey.OriginalLine]\n  return comparison !== 0\n    ? comparison\n    : a[MappingKey.OriginalColumn] - b[MappingKey.OriginalColumn]\n}\n\nfunction compareGenerated(a: Mapping, b: Mapping): number {\n  const comparison = a[MappingKey.GeneratedLine] - b[MappingKey.GeneratedLine]\n  return comparison !== 0\n    ? comparison\n    : a[MappingKey.GeneratedColumn] - b[MappingKey.GeneratedColumn]\n}\n\nfunction memoize<T>(fn: () => T): () => T {\n  let value: T | undefined\n  return () => {\n    if (value === undefined) value = fn()\n    return value\n  }\n}\n\nexport interface TextSpan {\n  start: number\n  length: number\n}\n\nfunction contains(haystack: TextSpan, needle: TextSpan): boolean {\n  return (\n    haystack.start <= needle.start &&\n    haystack.start + haystack.length >= needle.start + needle.length\n  )\n}\n\n// Binary search.\n// Performance analysis: http://neil.fraser.name/news/2007/10/09/\nfunction findCommonPrefixLength(a: string, b: string): number {\n  if (a.length === 0 || b.length === 0 || a.charCodeAt(0) !== b.charCodeAt(0))\n    return 0\n  let low = 0\n  let high = Math.min(a.length, b.length)\n  let mid = high\n  let start = 0\n  while (low < mid) {\n    if (a.slice(start, mid) === b.slice(start, mid)) {\n      low = mid\n      start = low\n    } else {\n      high = mid\n    }\n\n    mid = Math.floor((high - low) / 2 + low)\n  }\n\n  if (isSurrogatePair(a.charCodeAt(mid - 1))) mid--\n\n  return mid\n}\n\nfunction isSurrogatePair(ch: number): boolean {\n  return ch >= 0xd800 && ch <= 0xdbff\n}\n"],"names":[],"mappings":"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"}