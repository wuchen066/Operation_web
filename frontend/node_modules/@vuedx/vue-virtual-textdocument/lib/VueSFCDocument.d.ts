import type { CompilerError, SFCBlock, SFCDescriptor } from '@vuedx/compiler-sfc';
import { CompileOptions, CompileOutput } from '@vuedx/compiler-tsx';
import { BinarySearchBias } from '@vuedx/shared';
import type { RootNode } from '@vuedx/template-ast-types';
import { Position, Range, TextDocument, TextDocumentContentChangeEvent } from 'vscode-languageserver-textdocument';
export declare type Mapping = [
    GeneratedLine: number,
    GeneratedColumn: number,
    OriginalLine: number,
    OriginalColumn: number,
    Name: string | undefined
];
interface VueToTsxSnapshot extends CompileOutput {
    readonly document: TextDocument;
    readonly mappingsByOriginalOrder: Mapping[];
    readonly mappingsByGeneratedOrder: Mapping[];
    readonly blocks: SFCBlock[];
}
declare type SourceMapBiasType = typeof BinarySearchBias[keyof typeof BinarySearchBias];
export declare class VueSFCDocument implements TextDocument {
    readonly originalFileName: string;
    readonly generatedFileName: string;
    readonly options: Required<CompileOptions>;
    private _original;
    private constructor();
    /** @deprecated used by tsserver */
    lineMap: unknown | undefined;
    /** @deprecated used by tsserver */
    get text(): string;
    /** @deprecated used by tsserver */
    getLineAndCharacterOfPosition(position: number): Position;
    getSourceFile(fileName?: string): {
        fileName: string;
        readonly text: string;
        lineMap: unknown;
        getLineAndCharacterOfPosition: (position: number) => Position;
    };
    get fileName(): string;
    get descriptor(): SFCDescriptor;
    get errors(): Array<CompilerError | SyntaxError>;
    get templateAST(): RootNode | undefined;
    get original(): TextDocument;
    get generated(): TextDocument;
    get blocks(): SFCBlock[];
    get snapshot(): VueToTsxSnapshot;
    get map(): string;
    getText(range?: Range): string;
    positionAt(offset: number): Position;
    offsetAt(position: Position): number;
    get version(): number;
    get lineCount(): number;
    get uri(): string;
    get languageId(): string;
    getBlockAt(offset: number): SFCBlock | null;
    private _snapshot;
    private _compile;
    findMapping(positionType: 'original' | 'generated', position: Position, searchBias?: SourceMapBiasType): Mapping | null;
    originalPositionFor(position: Position): Position | null;
    originalOffsetAt(offset: number): number | null;
    findOriginalTextSpan(spanInGeneratedText: TextSpan): TextSpan | null;
    findGeneratedTextSpan(spanInOriginalText: TextSpan): TextSpan | null;
    private _processMappingUsingMeta;
    generatedPositionFor(position: Position): Position | null;
    generatedOffsetAt(offset: number, isZeroWidth?: boolean): number | null;
    static create(fileName: string, content: string, options: Omit<CompileOptions, 'cache' | 'fileName'>, version?: number): VueSFCDocument;
    update(changes: TextDocumentContentChangeEvent[], version: number): void;
}
export interface TextSpan {
    start: number;
    length: number;
}
export {};
//# sourceMappingURL=VueSFCDocument.d.ts.map